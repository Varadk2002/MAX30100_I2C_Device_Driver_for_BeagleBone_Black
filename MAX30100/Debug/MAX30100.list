
MAX30100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f84  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08001114  08001114  00002114  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800130c  0800130c  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800130c  0800130c  0000230c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001314  08001314  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001314  08001314  00002314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001318  08001318  00002318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800131c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          000001ac  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000200  20000200  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   000016f9  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000078f  00000000  00000000  00004777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00004f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000116  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018a2f  00000000  00000000  000051b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000021e1  00000000  00000000  0001dbe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bfb2  00000000  00000000  0001fdc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000abd78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000994  00000000  00000000  000abdbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00000025  00000000  00000000  000ac750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000009a  00000000  00000000  000ac775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080010fc 	.word	0x080010fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	080010fc 	.word	0x080010fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <UartPutch>:
		USART2->BRR = 0x008B;
	// enable uart=1
	USART2->CR1 |= USART_CR1_UE;
}

void UartPutch(int ch) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	// write char in TDR
	USART2->DR = ch;
 8000278:	4a07      	ldr	r2, [pc, #28]	@ (8000298 <UartPutch+0x28>)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	6053      	str	r3, [r2, #4]
	// wait until Tx is done (until Tx regr is not empty)
	while((USART2->SR & USART_SR_TXE) == 0)
 800027e:	bf00      	nop
 8000280:	4b05      	ldr	r3, [pc, #20]	@ (8000298 <UartPutch+0x28>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0f9      	beq.n	8000280 <UartPutch+0x10>
		;
}
 800028c:	bf00      	nop
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40004400 	.word	0x40004400

0800029c <UartPuts>:
		;
	// read char from RDR
	return USART2->DR;
}

void UartPuts(char *str) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	for(int i=0; str[i] != '\0'; i++)
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	e009      	b.n	80002be <UartPuts+0x22>
		UartPutch(str[i]);
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	4413      	add	r3, r2
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	4618      	mov	r0, r3
 80002b4:	f7ff ffdc 	bl	8000270 <UartPutch>
	for(int i=0; str[i] != '\0'; i++)
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	3301      	adds	r3, #1
 80002bc:	60fb      	str	r3, [r7, #12]
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	4413      	add	r3, r2
 80002c4:	781b      	ldrb	r3, [r3, #0]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d1ef      	bne.n	80002aa <UartPuts+0xe>
}
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <I2CInit>:
 */


#include "i2c.h"

void I2CInit(void) {
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
	// gpio config
	// enable gpio b clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80002d8:	4b29      	ldr	r3, [pc, #164]	@ (8000380 <I2CInit+0xac>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002dc:	4a28      	ldr	r2, [pc, #160]	@ (8000380 <I2CInit+0xac>)
 80002de:	f043 0302 	orr.w	r3, r3, #2
 80002e2:	6313      	str	r3, [r2, #48]	@ 0x30
	// set mode as alt fn (10)
	GPIOB->MODER |= BV(2*6+1) | BV(2*7+1);
 80002e4:	4b27      	ldr	r3, [pc, #156]	@ (8000384 <I2CInit+0xb0>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a26      	ldr	r2, [pc, #152]	@ (8000384 <I2CInit+0xb0>)
 80002ea:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80002ee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(BV(2*6) | BV(2*7));
 80002f0:	4b24      	ldr	r3, [pc, #144]	@ (8000384 <I2CInit+0xb0>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a23      	ldr	r2, [pc, #140]	@ (8000384 <I2CInit+0xb0>)
 80002f6:	f423 43a0 	bic.w	r3, r3, #20480	@ 0x5000
 80002fa:	6013      	str	r3, [r2, #0]
	// set alt fn to AF4 (i2c)
	GPIOB->AFR[0] = (4 << (4*6)) | (4 << (4*7));
 80002fc:	4b21      	ldr	r3, [pc, #132]	@ (8000384 <I2CInit+0xb0>)
 80002fe:	f04f 4288 	mov.w	r2, #1140850688	@ 0x44000000
 8000302:	621a      	str	r2, [r3, #32]
	// no pull up & pull down regr
	GPIOB->PUPDR &= ~(BV(2*6+1) | BV(2*7+1) | BV(2*6) | BV(2*7));
 8000304:	4b1f      	ldr	r3, [pc, #124]	@ (8000384 <I2CInit+0xb0>)
 8000306:	68db      	ldr	r3, [r3, #12]
 8000308:	4a1e      	ldr	r2, [pc, #120]	@ (8000384 <I2CInit+0xb0>)
 800030a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800030e:	60d3      	str	r3, [r2, #12]
	// Enable open-drain for PB6 & PB7
	GPIOB->OTYPER |= BV(6) | BV(7);
 8000310:	4b1c      	ldr	r3, [pc, #112]	@ (8000384 <I2CInit+0xb0>)
 8000312:	685b      	ldr	r3, [r3, #4]
 8000314:	4a1b      	ldr	r2, [pc, #108]	@ (8000384 <I2CInit+0xb0>)
 8000316:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800031a:	6053      	str	r3, [r2, #4]

	// i2c config
	// enable i2c peri clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800031c:	4b18      	ldr	r3, [pc, #96]	@ (8000380 <I2CInit+0xac>)
 800031e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000320:	4a17      	ldr	r2, [pc, #92]	@ (8000380 <I2CInit+0xac>)
 8000322:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000326:	6413      	str	r3, [r2, #64]	@ 0x40
	// i2c sw reset
	I2C1->CR1 |= I2C_CR1_SWRST;
 8000328:	4b17      	ldr	r3, [pc, #92]	@ (8000388 <I2CInit+0xb4>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a16      	ldr	r2, [pc, #88]	@ (8000388 <I2CInit+0xb4>)
 800032e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000332:	6013      	str	r3, [r2, #0]
	I2C1->CR1 = 0;				// clear all CR1 bits
 8000334:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <I2CInit+0xb4>)
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
	// peri clock -- CR2 = 16MHz
	I2C1->CR2 |= 16 << I2C_CR2_FREQ_Pos;
 800033a:	4b13      	ldr	r3, [pc, #76]	@ (8000388 <I2CInit+0xb4>)
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	4a12      	ldr	r2, [pc, #72]	@ (8000388 <I2CInit+0xb4>)
 8000340:	f043 0310 	orr.w	r3, r3, #16
 8000344:	6053      	str	r3, [r2, #4]
	// set i2c clock -- CCR = 80 (Std mode=100KHz)
	I2C1->CCR = 80;
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <I2CInit+0xb4>)
 8000348:	2250      	movs	r2, #80	@ 0x50
 800034a:	61da      	str	r2, [r3, #28]
	I2C1->CCR &= ~I2C_CCR_FS;	// standard mode (default)
 800034c:	4b0e      	ldr	r3, [pc, #56]	@ (8000388 <I2CInit+0xb4>)
 800034e:	69db      	ldr	r3, [r3, #28]
 8000350:	4a0d      	ldr	r2, [pc, #52]	@ (8000388 <I2CInit+0xb4>)
 8000352:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000356:	61d3      	str	r3, [r2, #28]
	// set Trise -- TRISE = 17
	I2C1->TRISE = 17;
 8000358:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <I2CInit+0xb4>)
 800035a:	2211      	movs	r2, #17
 800035c:	621a      	str	r2, [r3, #32]
	// enable ack
	I2C1->CR1 |= I2C_CR1_ACK;
 800035e:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <I2CInit+0xb4>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a09      	ldr	r2, [pc, #36]	@ (8000388 <I2CInit+0xb4>)
 8000364:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000368:	6013      	str	r3, [r2, #0]
	// enable i2c peri
	I2C1->CR1 |= I2C_CR1_PE;
 800036a:	4b07      	ldr	r3, [pc, #28]	@ (8000388 <I2CInit+0xb4>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a06      	ldr	r2, [pc, #24]	@ (8000388 <I2CInit+0xb4>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6013      	str	r3, [r2, #0]
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	40020400 	.word	0x40020400
 8000388:	40005400 	.word	0x40005400

0800038c <I2CStart>:


void I2CStart(void) {
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_START;
 8000390:	4b08      	ldr	r3, [pc, #32]	@ (80003b4 <I2CStart+0x28>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a07      	ldr	r2, [pc, #28]	@ (80003b4 <I2CStart+0x28>)
 8000396:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800039a:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & I2C_SR1_SB));
 800039c:	bf00      	nop
 800039e:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <I2CStart+0x28>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f9      	beq.n	800039e <I2CStart+0x12>
}
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	40005400 	.word	0x40005400

080003b8 <I2CRepeatStart>:

void I2CRepeatStart(void) {
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
	I2CStart();
 80003bc:	f7ff ffe6 	bl	800038c <I2CStart>
}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <I2CStop>:

void I2CStop(void) {
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0

	I2C1->CR1 |= I2C_CR1_STOP;
 80003c8:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <I2CStop+0x28>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a07      	ldr	r2, [pc, #28]	@ (80003ec <I2CStop+0x28>)
 80003ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003d2:	6013      	str	r3, [r2, #0]

	while(I2C1->SR2 & I2C_SR2_BUSY);
 80003d4:	bf00      	nop
 80003d6:	4b05      	ldr	r3, [pc, #20]	@ (80003ec <I2CStop+0x28>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f003 0302 	and.w	r3, r3, #2
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f9      	bne.n	80003d6 <I2CStop+0x12>
}
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bc80      	pop	{r7}
 80003ea:	4770      	bx	lr
 80003ec:	40005400 	.word	0x40005400

080003f0 <I2CSendSlaveAddr>:

void I2CSendSlaveAddr(uint8_t addr) {
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]

	I2C1->DR = addr;
 80003fa:	4a09      	ldr	r2, [pc, #36]	@ (8000420 <I2CSendSlaveAddr+0x30>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	6113      	str	r3, [r2, #16]

	while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000400:	bf00      	nop
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <I2CSendSlaveAddr+0x30>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f003 0302 	and.w	r3, r3, #2
 800040a:	2b00      	cmp	r3, #0
 800040c:	d0f9      	beq.n	8000402 <I2CSendSlaveAddr+0x12>

	(void)I2C1->SR1;
 800040e:	4b04      	ldr	r3, [pc, #16]	@ (8000420 <I2CSendSlaveAddr+0x30>)
 8000410:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2;
 8000412:	4b03      	ldr	r3, [pc, #12]	@ (8000420 <I2CSendSlaveAddr+0x30>)
 8000414:	699b      	ldr	r3, [r3, #24]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	40005400 	.word	0x40005400

08000424 <I2CSendData>:

void I2CSendData(uint8_t data) {
 8000424:	b480      	push	{r7}
 8000426:	b083      	sub	sp, #12
 8000428:	af00      	add	r7, sp, #0
 800042a:	4603      	mov	r3, r0
 800042c:	71fb      	strb	r3, [r7, #7]

	while(!(I2C1->SR1 & I2C_SR1_TXE));
 800042e:	bf00      	nop
 8000430:	4b0a      	ldr	r3, [pc, #40]	@ (800045c <I2CSendData+0x38>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000438:	2b00      	cmp	r3, #0
 800043a:	d0f9      	beq.n	8000430 <I2CSendData+0xc>

	I2C1->DR = data;
 800043c:	4a07      	ldr	r2, [pc, #28]	@ (800045c <I2CSendData+0x38>)
 800043e:	79fb      	ldrb	r3, [r7, #7]
 8000440:	6113      	str	r3, [r2, #16]

    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000442:	bf00      	nop
 8000444:	4b05      	ldr	r3, [pc, #20]	@ (800045c <I2CSendData+0x38>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	2b00      	cmp	r3, #0
 800044e:	d0f9      	beq.n	8000444 <I2CSendData+0x20>
}
 8000450:	bf00      	nop
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr
 800045c:	40005400 	.word	0x40005400

08000460 <I2CRecvDataNAck>:
	while(!(I2C1->SR1 & I2C_SR1_RXNE));
	// collect received data and return it
	return I2C1->DR;
}

uint8_t I2CRecvDataNAck(void) {
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
	// send no ack for next byte read
	I2C1->CR1 &= ~(I2C_CR1_ACK | I2C_CR1_POS);
 8000464:	4b09      	ldr	r3, [pc, #36]	@ (800048c <I2CRecvDataNAck+0x2c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a08      	ldr	r2, [pc, #32]	@ (800048c <I2CRecvDataNAck+0x2c>)
 800046a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800046e:	6013      	str	r3, [r2, #0]
	// wait until data is received
	while(!(I2C1->SR1 & I2C_SR1_RXNE));
 8000470:	bf00      	nop
 8000472:	4b06      	ldr	r3, [pc, #24]	@ (800048c <I2CRecvDataNAck+0x2c>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0f9      	beq.n	8000472 <I2CRecvDataNAck+0x12>
	// collect received data and return it
	return I2C1->DR;
 800047e:	4b03      	ldr	r3, [pc, #12]	@ (800048c <I2CRecvDataNAck+0x2c>)
 8000480:	691b      	ldr	r3, [r3, #16]
 8000482:	b2db      	uxtb	r3, r3
}
 8000484:	4618      	mov	r0, r3
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr
 800048c:	40005400 	.word	0x40005400

08000490 <DelayMs>:

void SwDelayMs(uint32_t ms);

uint32_t DWT_Init(void);

static inline void DelayMs(volatile uint32_t ms) {
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000498:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <DelayMs+0x44>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800049e:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <DelayMs+0x48>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a0e      	ldr	r2, [pc, #56]	@ (80004dc <DelayMs+0x4c>)
 80004a4:	fba2 2303 	umull	r2, r3, r2, r3
 80004a8:	099b      	lsrs	r3, r3, #6
 80004aa:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	fb02 f303 	mul.w	r3, r2, r3
 80004b4:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80004b6:	bf00      	nop
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <DelayMs+0x44>)
 80004ba:	685a      	ldr	r2, [r3, #4]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	1ad2      	subs	r2, r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d3f8      	bcc.n	80004b8 <DelayMs+0x28>
}
 80004c6:	bf00      	nop
 80004c8:	bf00      	nop
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	e0001000 	.word	0xe0001000
 80004d8:	20000000 	.word	0x20000000
 80004dc:	10624dd3 	.word	0x10624dd3

080004e0 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	max30100_init();
 80004e4:	f000 f868 	bl	80005b8 <max30100_init>

	while(1)
	{
		void max30100_read_and_calculate_spo2(void);
		DelayMs(2000);
 80004e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004ec:	f7ff ffd0 	bl	8000490 <DelayMs>
	{
 80004f0:	bf00      	nop
 80004f2:	e7f9      	b.n	80004e8 <main+0x8>

080004f4 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80004fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <DelayMs+0x44>)
 80004fe:	685b      	ldr	r3, [r3, #4]
 8000500:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <DelayMs+0x48>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <DelayMs+0x4c>)
 8000508:	fba2 2303 	umull	r2, r3, r2, r3
 800050c:	099b      	lsrs	r3, r3, #6
 800050e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	fb02 f303 	mul.w	r3, r2, r3
 8000518:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800051a:	bf00      	nop
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <DelayMs+0x44>)
 800051e:	685a      	ldr	r2, [r3, #4]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	1ad2      	subs	r2, r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	429a      	cmp	r2, r3
 8000528:	d3f8      	bcc.n	800051c <DelayMs+0x28>
}
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	bc80      	pop	{r7}
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	e0001000 	.word	0xe0001000
 800053c:	20000000 	.word	0x20000000
 8000540:	10624dd3 	.word	0x10624dd3

08000544 <max30100_write>:

static uint16_t ir_buffer[NUM_SAMPLES];
static uint16_t red_buffer[NUM_SAMPLES];

void max30100_write(uint8_t reg,uint8_t val)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	460a      	mov	r2, r1
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	71bb      	strb	r3, [r7, #6]
	I2CStart();
 8000554:	f7ff ff1a 	bl	800038c <I2CStart>
	I2CSendSlaveAddr(MAX30100_Write_ADDR);
 8000558:	20ae      	movs	r0, #174	@ 0xae
 800055a:	f7ff ff49 	bl	80003f0 <I2CSendSlaveAddr>
	I2CSendData(reg);
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ff5f 	bl	8000424 <I2CSendData>
	I2CSendData(val);
 8000566:	79bb      	ldrb	r3, [r7, #6]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ff5b 	bl	8000424 <I2CSendData>
	I2CStop();
 800056e:	f7ff ff29 	bl	80003c4 <I2CStop>
}
 8000572:	bf00      	nop
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <max30100_read>:

uint8_t max30100_read(uint8_t reg)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b084      	sub	sp, #16
 800057e:	af00      	add	r7, sp, #0
 8000580:	4603      	mov	r3, r0
 8000582:	71fb      	strb	r3, [r7, #7]
	I2CStart();
 8000584:	f7ff ff02 	bl	800038c <I2CStart>
	I2CSendSlaveAddr(MAX30100_Write_ADDR);
 8000588:	20ae      	movs	r0, #174	@ 0xae
 800058a:	f7ff ff31 	bl	80003f0 <I2CSendSlaveAddr>
	I2CSendData(reg);
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff ff47 	bl	8000424 <I2CSendData>
	I2CRepeatStart();
 8000596:	f7ff ff0f 	bl	80003b8 <I2CRepeatStart>

	I2CSendSlaveAddr(MAX30100_Read_ADDR);
 800059a:	20af      	movs	r0, #175	@ 0xaf
 800059c:	f7ff ff28 	bl	80003f0 <I2CSendSlaveAddr>
	uint8_t data = I2CRecvDataNAck();
 80005a0:	f7ff ff5e 	bl	8000460 <I2CRecvDataNAck>
 80005a4:	4603      	mov	r3, r0
 80005a6:	73fb      	strb	r3, [r7, #15]
	I2CStop();
 80005a8:	f7ff ff0c 	bl	80003c4 <I2CStop>
	return data;
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <max30100_init>:
char message[64];

uint8_t pwr_ready = 0;

void max30100_init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
    I2CInit();
 80005be:	f7ff fe89 	bl	80002d4 <I2CInit>

    for(int i = 0;i<10;i++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	e023      	b.n	8000610 <max30100_init+0x58>
    {
    	sprintf(message, "Initing Max30100. %d...\n\r", i+1);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	461a      	mov	r2, r3
 80005ce:	492a      	ldr	r1, [pc, #168]	@ (8000678 <max30100_init+0xc0>)
 80005d0:	482a      	ldr	r0, [pc, #168]	@ (800067c <max30100_init+0xc4>)
 80005d2:	f000 f8fb 	bl	80007cc <siprintf>
    	UartPuts(message);
 80005d6:	4829      	ldr	r0, [pc, #164]	@ (800067c <max30100_init+0xc4>)
 80005d8:	f7ff fe60 	bl	800029c <UartPuts>
    	uint8_t init = max30100_read(int_status);
 80005dc:	2000      	movs	r0, #0
 80005de:	f7ff ffcc 	bl	800057a <max30100_read>
 80005e2:	4603      	mov	r3, r0
 80005e4:	70fb      	strb	r3, [r7, #3]
    	sprintf(message, "INT_STATUS = 0x%02X\n\r", init);
 80005e6:	78fb      	ldrb	r3, [r7, #3]
 80005e8:	461a      	mov	r2, r3
 80005ea:	4925      	ldr	r1, [pc, #148]	@ (8000680 <max30100_init+0xc8>)
 80005ec:	4823      	ldr	r0, [pc, #140]	@ (800067c <max30100_init+0xc4>)
 80005ee:	f000 f8ed 	bl	80007cc <siprintf>
    	UartPuts(message);
 80005f2:	4822      	ldr	r0, [pc, #136]	@ (800067c <max30100_init+0xc4>)
 80005f4:	f7ff fe52 	bl	800029c <UartPuts>

    	if(init & 0x01)
 80005f8:	78fb      	ldrb	r3, [r7, #3]
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <max30100_init+0x52>
    	{
    		pwr_ready = 1;
 8000602:	4b20      	ldr	r3, [pc, #128]	@ (8000684 <max30100_init+0xcc>)
 8000604:	2201      	movs	r2, #1
 8000606:	701a      	strb	r2, [r3, #0]
    		break;
 8000608:	e005      	b.n	8000616 <max30100_init+0x5e>
    for(int i = 0;i<10;i++)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b09      	cmp	r3, #9
 8000614:	ddd8      	ble.n	80005c8 <max30100_init+0x10>
    	}
    }


    	if(pwr_ready)
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <max30100_init+0xcc>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d024      	beq.n	8000668 <max30100_init+0xb0>
    	{
    		UartPuts("Init Process Successfull\n\r");
 800061e:	481a      	ldr	r0, [pc, #104]	@ (8000688 <max30100_init+0xd0>)
 8000620:	f7ff fe3c 	bl	800029c <UartPuts>

    		max30100_write(mode_config, spo2_only);
 8000624:	2103      	movs	r1, #3
 8000626:	2006      	movs	r0, #6
 8000628:	f7ff ff8c 	bl	8000544 <max30100_write>
    		DelayMs(50);
 800062c:	2032      	movs	r0, #50	@ 0x32
 800062e:	f7ff ff61 	bl	80004f4 <DelayMs>
    		UartPuts("Step 1 Complete...Mode Config\n\r");
 8000632:	4816      	ldr	r0, [pc, #88]	@ (800068c <max30100_init+0xd4>)
 8000634:	f7ff fe32 	bl	800029c <UartPuts>

    		max30100_write(spo2_config,0x5C);
 8000638:	215c      	movs	r1, #92	@ 0x5c
 800063a:	2007      	movs	r0, #7
 800063c:	f7ff ff82 	bl	8000544 <max30100_write>
    		DelayMs(50);
 8000640:	2032      	movs	r0, #50	@ 0x32
 8000642:	f7ff ff57 	bl	80004f4 <DelayMs>
    		UartPuts("Step 2 Complete...Spo2 Config\n\r");
 8000646:	4812      	ldr	r0, [pc, #72]	@ (8000690 <max30100_init+0xd8>)
 8000648:	f7ff fe28 	bl	800029c <UartPuts>

    		max30100_write(led_config, 0x59);
 800064c:	2159      	movs	r1, #89	@ 0x59
 800064e:	2009      	movs	r0, #9
 8000650:	f7ff ff78 	bl	8000544 <max30100_write>
    		DelayMs(50);
 8000654:	2032      	movs	r0, #50	@ 0x32
 8000656:	f7ff ff4d 	bl	80004f4 <DelayMs>
    		UartPuts("Step 2 Complete...Led current\n\r");
 800065a:	480e      	ldr	r0, [pc, #56]	@ (8000694 <max30100_init+0xdc>)
 800065c:	f7ff fe1e 	bl	800029c <UartPuts>

    		UartPuts("Max30100 init successfully\n\r");
 8000660:	480d      	ldr	r0, [pc, #52]	@ (8000698 <max30100_init+0xe0>)
 8000662:	f7ff fe1b 	bl	800029c <UartPuts>
    	else
    	{
    		//print uart fail to power on
    		UartPuts("Fail to init Max30100\n\r");
    	}
}
 8000666:	e002      	b.n	800066e <max30100_init+0xb6>
    		UartPuts("Fail to init Max30100\n\r");
 8000668:	480c      	ldr	r0, [pc, #48]	@ (800069c <max30100_init+0xe4>)
 800066a:	f7ff fe17 	bl	800029c <UartPuts>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	08001114 	.word	0x08001114
 800067c:	20000070 	.word	0x20000070
 8000680:	08001130 	.word	0x08001130
 8000684:	200000b0 	.word	0x200000b0
 8000688:	08001148 	.word	0x08001148
 800068c:	08001164 	.word	0x08001164
 8000690:	08001184 	.word	0x08001184
 8000694:	080011a4 	.word	0x080011a4
 8000698:	080011c4 	.word	0x080011c4
 800069c:	080011e4 	.word	0x080011e4

080006a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a8:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <_sbrk+0x5c>)
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <_sbrk+0x60>)
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d102      	bne.n	80006c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <_sbrk+0x64>)
 80006be:	4a12      	ldr	r2, [pc, #72]	@ (8000708 <_sbrk+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006c2:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <_sbrk+0x64>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d207      	bcs.n	80006e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d0:	f000 f89e 	bl	8000810 <__errno>
 80006d4:	4603      	mov	r3, r0
 80006d6:	220c      	movs	r2, #12
 80006d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006de:	e009      	b.n	80006f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e0:	4b08      	ldr	r3, [pc, #32]	@ (8000704 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e6:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <_sbrk+0x64>)
 80006f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006f2:	68fb      	ldr	r3, [r7, #12]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20020000 	.word	0x20020000
 8000700:	00000400 	.word	0x00000400
 8000704:	200000b4 	.word	0x200000b4
 8000708:	20000200 	.word	0x20000200

0800070c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000710:	f000 f802 	bl	8000718 <DWT_Init>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <DWT_Init+0x58>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	4a13      	ldr	r2, [pc, #76]	@ (8000770 <DWT_Init+0x58>)
 8000722:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000726:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <DWT_Init+0x58>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4a10      	ldr	r2, [pc, #64]	@ (8000770 <DWT_Init+0x58>)
 800072e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000732:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <DWT_Init+0x5c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0e      	ldr	r2, [pc, #56]	@ (8000774 <DWT_Init+0x5c>)
 800073a:	f023 0301 	bic.w	r3, r3, #1
 800073e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000740:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <DWT_Init+0x5c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a0b      	ldr	r2, [pc, #44]	@ (8000774 <DWT_Init+0x5c>)
 8000746:	f043 0301 	orr.w	r3, r3, #1
 800074a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800074c:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <DWT_Init+0x5c>)
 800074e:	2200      	movs	r2, #0
 8000750:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000752:	bf00      	nop
    __ASM volatile ("NOP");
 8000754:	bf00      	nop
    __ASM volatile ("NOP");
 8000756:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <DWT_Init+0x5c>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf0c      	ite	eq
 8000760:	2301      	moveq	r3, #1
 8000762:	2300      	movne	r3, #0
 8000764:	b2db      	uxtb	r3, r3
}
 8000766:	4618      	mov	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	bc80      	pop	{r7}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	e000edf0 	.word	0xe000edf0
 8000774:	e0001000 	.word	0xe0001000

08000778 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000778:	480d      	ldr	r0, [pc, #52]	@ (80007b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800077c:	f7ff ffc6 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	@ (80007b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	@ (80007b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	@ (80007bc <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	@ (80007c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	@ (80007c4 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a6:	f000 f839 	bl	800081c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007aa:	f7ff fe99 	bl	80004e0 <main>

080007ae <LoopForever>:

LoopForever:
  b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>
  ldr   r0, =_estack
 80007b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80007bc:	0800131c 	.word	0x0800131c
  ldr r2, =_sbss
 80007c0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80007c4:	20000200 	.word	0x20000200

080007c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC_IRQHandler>
	...

080007cc <siprintf>:
 80007cc:	b40e      	push	{r1, r2, r3}
 80007ce:	b510      	push	{r4, lr}
 80007d0:	b09d      	sub	sp, #116	@ 0x74
 80007d2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80007d4:	9002      	str	r0, [sp, #8]
 80007d6:	9006      	str	r0, [sp, #24]
 80007d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80007dc:	480a      	ldr	r0, [pc, #40]	@ (8000808 <siprintf+0x3c>)
 80007de:	9107      	str	r1, [sp, #28]
 80007e0:	9104      	str	r1, [sp, #16]
 80007e2:	490a      	ldr	r1, [pc, #40]	@ (800080c <siprintf+0x40>)
 80007e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80007e8:	9105      	str	r1, [sp, #20]
 80007ea:	2400      	movs	r4, #0
 80007ec:	a902      	add	r1, sp, #8
 80007ee:	6800      	ldr	r0, [r0, #0]
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80007f4:	f000 f98c 	bl	8000b10 <_svfiprintf_r>
 80007f8:	9b02      	ldr	r3, [sp, #8]
 80007fa:	701c      	strb	r4, [r3, #0]
 80007fc:	b01d      	add	sp, #116	@ 0x74
 80007fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000802:	b003      	add	sp, #12
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	20000004 	.word	0x20000004
 800080c:	ffff0208 	.word	0xffff0208

08000810 <__errno>:
 8000810:	4b01      	ldr	r3, [pc, #4]	@ (8000818 <__errno+0x8>)
 8000812:	6818      	ldr	r0, [r3, #0]
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000004 	.word	0x20000004

0800081c <__libc_init_array>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	4d0d      	ldr	r5, [pc, #52]	@ (8000854 <__libc_init_array+0x38>)
 8000820:	4c0d      	ldr	r4, [pc, #52]	@ (8000858 <__libc_init_array+0x3c>)
 8000822:	1b64      	subs	r4, r4, r5
 8000824:	10a4      	asrs	r4, r4, #2
 8000826:	2600      	movs	r6, #0
 8000828:	42a6      	cmp	r6, r4
 800082a:	d109      	bne.n	8000840 <__libc_init_array+0x24>
 800082c:	4d0b      	ldr	r5, [pc, #44]	@ (800085c <__libc_init_array+0x40>)
 800082e:	4c0c      	ldr	r4, [pc, #48]	@ (8000860 <__libc_init_array+0x44>)
 8000830:	f000 fc64 	bl	80010fc <_init>
 8000834:	1b64      	subs	r4, r4, r5
 8000836:	10a4      	asrs	r4, r4, #2
 8000838:	2600      	movs	r6, #0
 800083a:	42a6      	cmp	r6, r4
 800083c:	d105      	bne.n	800084a <__libc_init_array+0x2e>
 800083e:	bd70      	pop	{r4, r5, r6, pc}
 8000840:	f855 3b04 	ldr.w	r3, [r5], #4
 8000844:	4798      	blx	r3
 8000846:	3601      	adds	r6, #1
 8000848:	e7ee      	b.n	8000828 <__libc_init_array+0xc>
 800084a:	f855 3b04 	ldr.w	r3, [r5], #4
 800084e:	4798      	blx	r3
 8000850:	3601      	adds	r6, #1
 8000852:	e7f2      	b.n	800083a <__libc_init_array+0x1e>
 8000854:	08001314 	.word	0x08001314
 8000858:	08001314 	.word	0x08001314
 800085c:	08001314 	.word	0x08001314
 8000860:	08001318 	.word	0x08001318

08000864 <__retarget_lock_acquire_recursive>:
 8000864:	4770      	bx	lr

08000866 <__retarget_lock_release_recursive>:
 8000866:	4770      	bx	lr

08000868 <_free_r>:
 8000868:	b538      	push	{r3, r4, r5, lr}
 800086a:	4605      	mov	r5, r0
 800086c:	2900      	cmp	r1, #0
 800086e:	d041      	beq.n	80008f4 <_free_r+0x8c>
 8000870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000874:	1f0c      	subs	r4, r1, #4
 8000876:	2b00      	cmp	r3, #0
 8000878:	bfb8      	it	lt
 800087a:	18e4      	addlt	r4, r4, r3
 800087c:	f000 f8e0 	bl	8000a40 <__malloc_lock>
 8000880:	4a1d      	ldr	r2, [pc, #116]	@ (80008f8 <_free_r+0x90>)
 8000882:	6813      	ldr	r3, [r2, #0]
 8000884:	b933      	cbnz	r3, 8000894 <_free_r+0x2c>
 8000886:	6063      	str	r3, [r4, #4]
 8000888:	6014      	str	r4, [r2, #0]
 800088a:	4628      	mov	r0, r5
 800088c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000890:	f000 b8dc 	b.w	8000a4c <__malloc_unlock>
 8000894:	42a3      	cmp	r3, r4
 8000896:	d908      	bls.n	80008aa <_free_r+0x42>
 8000898:	6820      	ldr	r0, [r4, #0]
 800089a:	1821      	adds	r1, r4, r0
 800089c:	428b      	cmp	r3, r1
 800089e:	bf01      	itttt	eq
 80008a0:	6819      	ldreq	r1, [r3, #0]
 80008a2:	685b      	ldreq	r3, [r3, #4]
 80008a4:	1809      	addeq	r1, r1, r0
 80008a6:	6021      	streq	r1, [r4, #0]
 80008a8:	e7ed      	b.n	8000886 <_free_r+0x1e>
 80008aa:	461a      	mov	r2, r3
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	b10b      	cbz	r3, 80008b4 <_free_r+0x4c>
 80008b0:	42a3      	cmp	r3, r4
 80008b2:	d9fa      	bls.n	80008aa <_free_r+0x42>
 80008b4:	6811      	ldr	r1, [r2, #0]
 80008b6:	1850      	adds	r0, r2, r1
 80008b8:	42a0      	cmp	r0, r4
 80008ba:	d10b      	bne.n	80008d4 <_free_r+0x6c>
 80008bc:	6820      	ldr	r0, [r4, #0]
 80008be:	4401      	add	r1, r0
 80008c0:	1850      	adds	r0, r2, r1
 80008c2:	4283      	cmp	r3, r0
 80008c4:	6011      	str	r1, [r2, #0]
 80008c6:	d1e0      	bne.n	800088a <_free_r+0x22>
 80008c8:	6818      	ldr	r0, [r3, #0]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	6053      	str	r3, [r2, #4]
 80008ce:	4408      	add	r0, r1
 80008d0:	6010      	str	r0, [r2, #0]
 80008d2:	e7da      	b.n	800088a <_free_r+0x22>
 80008d4:	d902      	bls.n	80008dc <_free_r+0x74>
 80008d6:	230c      	movs	r3, #12
 80008d8:	602b      	str	r3, [r5, #0]
 80008da:	e7d6      	b.n	800088a <_free_r+0x22>
 80008dc:	6820      	ldr	r0, [r4, #0]
 80008de:	1821      	adds	r1, r4, r0
 80008e0:	428b      	cmp	r3, r1
 80008e2:	bf04      	itt	eq
 80008e4:	6819      	ldreq	r1, [r3, #0]
 80008e6:	685b      	ldreq	r3, [r3, #4]
 80008e8:	6063      	str	r3, [r4, #4]
 80008ea:	bf04      	itt	eq
 80008ec:	1809      	addeq	r1, r1, r0
 80008ee:	6021      	streq	r1, [r4, #0]
 80008f0:	6054      	str	r4, [r2, #4]
 80008f2:	e7ca      	b.n	800088a <_free_r+0x22>
 80008f4:	bd38      	pop	{r3, r4, r5, pc}
 80008f6:	bf00      	nop
 80008f8:	200001fc 	.word	0x200001fc

080008fc <sbrk_aligned>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	4e0f      	ldr	r6, [pc, #60]	@ (800093c <sbrk_aligned+0x40>)
 8000900:	460c      	mov	r4, r1
 8000902:	6831      	ldr	r1, [r6, #0]
 8000904:	4605      	mov	r5, r0
 8000906:	b911      	cbnz	r1, 800090e <sbrk_aligned+0x12>
 8000908:	f000 fba4 	bl	8001054 <_sbrk_r>
 800090c:	6030      	str	r0, [r6, #0]
 800090e:	4621      	mov	r1, r4
 8000910:	4628      	mov	r0, r5
 8000912:	f000 fb9f 	bl	8001054 <_sbrk_r>
 8000916:	1c43      	adds	r3, r0, #1
 8000918:	d103      	bne.n	8000922 <sbrk_aligned+0x26>
 800091a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800091e:	4620      	mov	r0, r4
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	1cc4      	adds	r4, r0, #3
 8000924:	f024 0403 	bic.w	r4, r4, #3
 8000928:	42a0      	cmp	r0, r4
 800092a:	d0f8      	beq.n	800091e <sbrk_aligned+0x22>
 800092c:	1a21      	subs	r1, r4, r0
 800092e:	4628      	mov	r0, r5
 8000930:	f000 fb90 	bl	8001054 <_sbrk_r>
 8000934:	3001      	adds	r0, #1
 8000936:	d1f2      	bne.n	800091e <sbrk_aligned+0x22>
 8000938:	e7ef      	b.n	800091a <sbrk_aligned+0x1e>
 800093a:	bf00      	nop
 800093c:	200001f8 	.word	0x200001f8

08000940 <_malloc_r>:
 8000940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000944:	1ccd      	adds	r5, r1, #3
 8000946:	f025 0503 	bic.w	r5, r5, #3
 800094a:	3508      	adds	r5, #8
 800094c:	2d0c      	cmp	r5, #12
 800094e:	bf38      	it	cc
 8000950:	250c      	movcc	r5, #12
 8000952:	2d00      	cmp	r5, #0
 8000954:	4606      	mov	r6, r0
 8000956:	db01      	blt.n	800095c <_malloc_r+0x1c>
 8000958:	42a9      	cmp	r1, r5
 800095a:	d904      	bls.n	8000966 <_malloc_r+0x26>
 800095c:	230c      	movs	r3, #12
 800095e:	6033      	str	r3, [r6, #0]
 8000960:	2000      	movs	r0, #0
 8000962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000966:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a3c <_malloc_r+0xfc>
 800096a:	f000 f869 	bl	8000a40 <__malloc_lock>
 800096e:	f8d8 3000 	ldr.w	r3, [r8]
 8000972:	461c      	mov	r4, r3
 8000974:	bb44      	cbnz	r4, 80009c8 <_malloc_r+0x88>
 8000976:	4629      	mov	r1, r5
 8000978:	4630      	mov	r0, r6
 800097a:	f7ff ffbf 	bl	80008fc <sbrk_aligned>
 800097e:	1c43      	adds	r3, r0, #1
 8000980:	4604      	mov	r4, r0
 8000982:	d158      	bne.n	8000a36 <_malloc_r+0xf6>
 8000984:	f8d8 4000 	ldr.w	r4, [r8]
 8000988:	4627      	mov	r7, r4
 800098a:	2f00      	cmp	r7, #0
 800098c:	d143      	bne.n	8000a16 <_malloc_r+0xd6>
 800098e:	2c00      	cmp	r4, #0
 8000990:	d04b      	beq.n	8000a2a <_malloc_r+0xea>
 8000992:	6823      	ldr	r3, [r4, #0]
 8000994:	4639      	mov	r1, r7
 8000996:	4630      	mov	r0, r6
 8000998:	eb04 0903 	add.w	r9, r4, r3
 800099c:	f000 fb5a 	bl	8001054 <_sbrk_r>
 80009a0:	4581      	cmp	r9, r0
 80009a2:	d142      	bne.n	8000a2a <_malloc_r+0xea>
 80009a4:	6821      	ldr	r1, [r4, #0]
 80009a6:	1a6d      	subs	r5, r5, r1
 80009a8:	4629      	mov	r1, r5
 80009aa:	4630      	mov	r0, r6
 80009ac:	f7ff ffa6 	bl	80008fc <sbrk_aligned>
 80009b0:	3001      	adds	r0, #1
 80009b2:	d03a      	beq.n	8000a2a <_malloc_r+0xea>
 80009b4:	6823      	ldr	r3, [r4, #0]
 80009b6:	442b      	add	r3, r5
 80009b8:	6023      	str	r3, [r4, #0]
 80009ba:	f8d8 3000 	ldr.w	r3, [r8]
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	bb62      	cbnz	r2, 8000a1c <_malloc_r+0xdc>
 80009c2:	f8c8 7000 	str.w	r7, [r8]
 80009c6:	e00f      	b.n	80009e8 <_malloc_r+0xa8>
 80009c8:	6822      	ldr	r2, [r4, #0]
 80009ca:	1b52      	subs	r2, r2, r5
 80009cc:	d420      	bmi.n	8000a10 <_malloc_r+0xd0>
 80009ce:	2a0b      	cmp	r2, #11
 80009d0:	d917      	bls.n	8000a02 <_malloc_r+0xc2>
 80009d2:	1961      	adds	r1, r4, r5
 80009d4:	42a3      	cmp	r3, r4
 80009d6:	6025      	str	r5, [r4, #0]
 80009d8:	bf18      	it	ne
 80009da:	6059      	strne	r1, [r3, #4]
 80009dc:	6863      	ldr	r3, [r4, #4]
 80009de:	bf08      	it	eq
 80009e0:	f8c8 1000 	streq.w	r1, [r8]
 80009e4:	5162      	str	r2, [r4, r5]
 80009e6:	604b      	str	r3, [r1, #4]
 80009e8:	4630      	mov	r0, r6
 80009ea:	f000 f82f 	bl	8000a4c <__malloc_unlock>
 80009ee:	f104 000b 	add.w	r0, r4, #11
 80009f2:	1d23      	adds	r3, r4, #4
 80009f4:	f020 0007 	bic.w	r0, r0, #7
 80009f8:	1ac2      	subs	r2, r0, r3
 80009fa:	bf1c      	itt	ne
 80009fc:	1a1b      	subne	r3, r3, r0
 80009fe:	50a3      	strne	r3, [r4, r2]
 8000a00:	e7af      	b.n	8000962 <_malloc_r+0x22>
 8000a02:	6862      	ldr	r2, [r4, #4]
 8000a04:	42a3      	cmp	r3, r4
 8000a06:	bf0c      	ite	eq
 8000a08:	f8c8 2000 	streq.w	r2, [r8]
 8000a0c:	605a      	strne	r2, [r3, #4]
 8000a0e:	e7eb      	b.n	80009e8 <_malloc_r+0xa8>
 8000a10:	4623      	mov	r3, r4
 8000a12:	6864      	ldr	r4, [r4, #4]
 8000a14:	e7ae      	b.n	8000974 <_malloc_r+0x34>
 8000a16:	463c      	mov	r4, r7
 8000a18:	687f      	ldr	r7, [r7, #4]
 8000a1a:	e7b6      	b.n	800098a <_malloc_r+0x4a>
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	42a3      	cmp	r3, r4
 8000a22:	d1fb      	bne.n	8000a1c <_malloc_r+0xdc>
 8000a24:	2300      	movs	r3, #0
 8000a26:	6053      	str	r3, [r2, #4]
 8000a28:	e7de      	b.n	80009e8 <_malloc_r+0xa8>
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	6033      	str	r3, [r6, #0]
 8000a2e:	4630      	mov	r0, r6
 8000a30:	f000 f80c 	bl	8000a4c <__malloc_unlock>
 8000a34:	e794      	b.n	8000960 <_malloc_r+0x20>
 8000a36:	6005      	str	r5, [r0, #0]
 8000a38:	e7d6      	b.n	80009e8 <_malloc_r+0xa8>
 8000a3a:	bf00      	nop
 8000a3c:	200001fc 	.word	0x200001fc

08000a40 <__malloc_lock>:
 8000a40:	4801      	ldr	r0, [pc, #4]	@ (8000a48 <__malloc_lock+0x8>)
 8000a42:	f7ff bf0f 	b.w	8000864 <__retarget_lock_acquire_recursive>
 8000a46:	bf00      	nop
 8000a48:	200001f4 	.word	0x200001f4

08000a4c <__malloc_unlock>:
 8000a4c:	4801      	ldr	r0, [pc, #4]	@ (8000a54 <__malloc_unlock+0x8>)
 8000a4e:	f7ff bf0a 	b.w	8000866 <__retarget_lock_release_recursive>
 8000a52:	bf00      	nop
 8000a54:	200001f4 	.word	0x200001f4

08000a58 <__ssputs_r>:
 8000a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a5c:	688e      	ldr	r6, [r1, #8]
 8000a5e:	461f      	mov	r7, r3
 8000a60:	42be      	cmp	r6, r7
 8000a62:	680b      	ldr	r3, [r1, #0]
 8000a64:	4682      	mov	sl, r0
 8000a66:	460c      	mov	r4, r1
 8000a68:	4690      	mov	r8, r2
 8000a6a:	d82d      	bhi.n	8000ac8 <__ssputs_r+0x70>
 8000a6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000a70:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8000a74:	d026      	beq.n	8000ac4 <__ssputs_r+0x6c>
 8000a76:	6965      	ldr	r5, [r4, #20]
 8000a78:	6909      	ldr	r1, [r1, #16]
 8000a7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a7e:	eba3 0901 	sub.w	r9, r3, r1
 8000a82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a86:	1c7b      	adds	r3, r7, #1
 8000a88:	444b      	add	r3, r9
 8000a8a:	106d      	asrs	r5, r5, #1
 8000a8c:	429d      	cmp	r5, r3
 8000a8e:	bf38      	it	cc
 8000a90:	461d      	movcc	r5, r3
 8000a92:	0553      	lsls	r3, r2, #21
 8000a94:	d527      	bpl.n	8000ae6 <__ssputs_r+0x8e>
 8000a96:	4629      	mov	r1, r5
 8000a98:	f7ff ff52 	bl	8000940 <_malloc_r>
 8000a9c:	4606      	mov	r6, r0
 8000a9e:	b360      	cbz	r0, 8000afa <__ssputs_r+0xa2>
 8000aa0:	6921      	ldr	r1, [r4, #16]
 8000aa2:	464a      	mov	r2, r9
 8000aa4:	f000 fae6 	bl	8001074 <memcpy>
 8000aa8:	89a3      	ldrh	r3, [r4, #12]
 8000aaa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000aae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab2:	81a3      	strh	r3, [r4, #12]
 8000ab4:	6126      	str	r6, [r4, #16]
 8000ab6:	6165      	str	r5, [r4, #20]
 8000ab8:	444e      	add	r6, r9
 8000aba:	eba5 0509 	sub.w	r5, r5, r9
 8000abe:	6026      	str	r6, [r4, #0]
 8000ac0:	60a5      	str	r5, [r4, #8]
 8000ac2:	463e      	mov	r6, r7
 8000ac4:	42be      	cmp	r6, r7
 8000ac6:	d900      	bls.n	8000aca <__ssputs_r+0x72>
 8000ac8:	463e      	mov	r6, r7
 8000aca:	6820      	ldr	r0, [r4, #0]
 8000acc:	4632      	mov	r2, r6
 8000ace:	4641      	mov	r1, r8
 8000ad0:	f000 faa6 	bl	8001020 <memmove>
 8000ad4:	68a3      	ldr	r3, [r4, #8]
 8000ad6:	1b9b      	subs	r3, r3, r6
 8000ad8:	60a3      	str	r3, [r4, #8]
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	4433      	add	r3, r6
 8000ade:	6023      	str	r3, [r4, #0]
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	462a      	mov	r2, r5
 8000ae8:	f000 fad2 	bl	8001090 <_realloc_r>
 8000aec:	4606      	mov	r6, r0
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d1e0      	bne.n	8000ab4 <__ssputs_r+0x5c>
 8000af2:	6921      	ldr	r1, [r4, #16]
 8000af4:	4650      	mov	r0, sl
 8000af6:	f7ff feb7 	bl	8000868 <_free_r>
 8000afa:	230c      	movs	r3, #12
 8000afc:	f8ca 3000 	str.w	r3, [sl]
 8000b00:	89a3      	ldrh	r3, [r4, #12]
 8000b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b06:	81a3      	strh	r3, [r4, #12]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b0c:	e7e9      	b.n	8000ae2 <__ssputs_r+0x8a>
	...

08000b10 <_svfiprintf_r>:
 8000b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b14:	4698      	mov	r8, r3
 8000b16:	898b      	ldrh	r3, [r1, #12]
 8000b18:	061b      	lsls	r3, r3, #24
 8000b1a:	b09d      	sub	sp, #116	@ 0x74
 8000b1c:	4607      	mov	r7, r0
 8000b1e:	460d      	mov	r5, r1
 8000b20:	4614      	mov	r4, r2
 8000b22:	d510      	bpl.n	8000b46 <_svfiprintf_r+0x36>
 8000b24:	690b      	ldr	r3, [r1, #16]
 8000b26:	b973      	cbnz	r3, 8000b46 <_svfiprintf_r+0x36>
 8000b28:	2140      	movs	r1, #64	@ 0x40
 8000b2a:	f7ff ff09 	bl	8000940 <_malloc_r>
 8000b2e:	6028      	str	r0, [r5, #0]
 8000b30:	6128      	str	r0, [r5, #16]
 8000b32:	b930      	cbnz	r0, 8000b42 <_svfiprintf_r+0x32>
 8000b34:	230c      	movs	r3, #12
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b3c:	b01d      	add	sp, #116	@ 0x74
 8000b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b42:	2340      	movs	r3, #64	@ 0x40
 8000b44:	616b      	str	r3, [r5, #20]
 8000b46:	2300      	movs	r3, #0
 8000b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b4a:	2320      	movs	r3, #32
 8000b4c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b50:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b54:	2330      	movs	r3, #48	@ 0x30
 8000b56:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000cf4 <_svfiprintf_r+0x1e4>
 8000b5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b5e:	f04f 0901 	mov.w	r9, #1
 8000b62:	4623      	mov	r3, r4
 8000b64:	469a      	mov	sl, r3
 8000b66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b6a:	b10a      	cbz	r2, 8000b70 <_svfiprintf_r+0x60>
 8000b6c:	2a25      	cmp	r2, #37	@ 0x25
 8000b6e:	d1f9      	bne.n	8000b64 <_svfiprintf_r+0x54>
 8000b70:	ebba 0b04 	subs.w	fp, sl, r4
 8000b74:	d00b      	beq.n	8000b8e <_svfiprintf_r+0x7e>
 8000b76:	465b      	mov	r3, fp
 8000b78:	4622      	mov	r2, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	4638      	mov	r0, r7
 8000b7e:	f7ff ff6b 	bl	8000a58 <__ssputs_r>
 8000b82:	3001      	adds	r0, #1
 8000b84:	f000 80a7 	beq.w	8000cd6 <_svfiprintf_r+0x1c6>
 8000b88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b8a:	445a      	add	r2, fp
 8000b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f000 809f 	beq.w	8000cd6 <_svfiprintf_r+0x1c6>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ba2:	f10a 0a01 	add.w	sl, sl, #1
 8000ba6:	9304      	str	r3, [sp, #16]
 8000ba8:	9307      	str	r3, [sp, #28]
 8000baa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000bae:	931a      	str	r3, [sp, #104]	@ 0x68
 8000bb0:	4654      	mov	r4, sl
 8000bb2:	2205      	movs	r2, #5
 8000bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bb8:	484e      	ldr	r0, [pc, #312]	@ (8000cf4 <_svfiprintf_r+0x1e4>)
 8000bba:	f7ff fb09 	bl	80001d0 <memchr>
 8000bbe:	9a04      	ldr	r2, [sp, #16]
 8000bc0:	b9d8      	cbnz	r0, 8000bfa <_svfiprintf_r+0xea>
 8000bc2:	06d0      	lsls	r0, r2, #27
 8000bc4:	bf44      	itt	mi
 8000bc6:	2320      	movmi	r3, #32
 8000bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bcc:	0711      	lsls	r1, r2, #28
 8000bce:	bf44      	itt	mi
 8000bd0:	232b      	movmi	r3, #43	@ 0x2b
 8000bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8000bda:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bdc:	d015      	beq.n	8000c0a <_svfiprintf_r+0xfa>
 8000bde:	9a07      	ldr	r2, [sp, #28]
 8000be0:	4654      	mov	r4, sl
 8000be2:	2000      	movs	r0, #0
 8000be4:	f04f 0c0a 	mov.w	ip, #10
 8000be8:	4621      	mov	r1, r4
 8000bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bee:	3b30      	subs	r3, #48	@ 0x30
 8000bf0:	2b09      	cmp	r3, #9
 8000bf2:	d94b      	bls.n	8000c8c <_svfiprintf_r+0x17c>
 8000bf4:	b1b0      	cbz	r0, 8000c24 <_svfiprintf_r+0x114>
 8000bf6:	9207      	str	r2, [sp, #28]
 8000bf8:	e014      	b.n	8000c24 <_svfiprintf_r+0x114>
 8000bfa:	eba0 0308 	sub.w	r3, r0, r8
 8000bfe:	fa09 f303 	lsl.w	r3, r9, r3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	9304      	str	r3, [sp, #16]
 8000c06:	46a2      	mov	sl, r4
 8000c08:	e7d2      	b.n	8000bb0 <_svfiprintf_r+0xa0>
 8000c0a:	9b03      	ldr	r3, [sp, #12]
 8000c0c:	1d19      	adds	r1, r3, #4
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	9103      	str	r1, [sp, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bfbb      	ittet	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	f042 0202 	orrlt.w	r2, r2, #2
 8000c1c:	9307      	strge	r3, [sp, #28]
 8000c1e:	9307      	strlt	r3, [sp, #28]
 8000c20:	bfb8      	it	lt
 8000c22:	9204      	strlt	r2, [sp, #16]
 8000c24:	7823      	ldrb	r3, [r4, #0]
 8000c26:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c28:	d10a      	bne.n	8000c40 <_svfiprintf_r+0x130>
 8000c2a:	7863      	ldrb	r3, [r4, #1]
 8000c2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c2e:	d132      	bne.n	8000c96 <_svfiprintf_r+0x186>
 8000c30:	9b03      	ldr	r3, [sp, #12]
 8000c32:	1d1a      	adds	r2, r3, #4
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	9203      	str	r2, [sp, #12]
 8000c38:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c3c:	3402      	adds	r4, #2
 8000c3e:	9305      	str	r3, [sp, #20]
 8000c40:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000cf8 <_svfiprintf_r+0x1e8>
 8000c44:	7821      	ldrb	r1, [r4, #0]
 8000c46:	2203      	movs	r2, #3
 8000c48:	4650      	mov	r0, sl
 8000c4a:	f7ff fac1 	bl	80001d0 <memchr>
 8000c4e:	b138      	cbz	r0, 8000c60 <_svfiprintf_r+0x150>
 8000c50:	9b04      	ldr	r3, [sp, #16]
 8000c52:	eba0 000a 	sub.w	r0, r0, sl
 8000c56:	2240      	movs	r2, #64	@ 0x40
 8000c58:	4082      	lsls	r2, r0
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	3401      	adds	r4, #1
 8000c5e:	9304      	str	r3, [sp, #16]
 8000c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c64:	4825      	ldr	r0, [pc, #148]	@ (8000cfc <_svfiprintf_r+0x1ec>)
 8000c66:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c6a:	2206      	movs	r2, #6
 8000c6c:	f7ff fab0 	bl	80001d0 <memchr>
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d036      	beq.n	8000ce2 <_svfiprintf_r+0x1d2>
 8000c74:	4b22      	ldr	r3, [pc, #136]	@ (8000d00 <_svfiprintf_r+0x1f0>)
 8000c76:	bb1b      	cbnz	r3, 8000cc0 <_svfiprintf_r+0x1b0>
 8000c78:	9b03      	ldr	r3, [sp, #12]
 8000c7a:	3307      	adds	r3, #7
 8000c7c:	f023 0307 	bic.w	r3, r3, #7
 8000c80:	3308      	adds	r3, #8
 8000c82:	9303      	str	r3, [sp, #12]
 8000c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c86:	4433      	add	r3, r6
 8000c88:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c8a:	e76a      	b.n	8000b62 <_svfiprintf_r+0x52>
 8000c8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c90:	460c      	mov	r4, r1
 8000c92:	2001      	movs	r0, #1
 8000c94:	e7a8      	b.n	8000be8 <_svfiprintf_r+0xd8>
 8000c96:	2300      	movs	r3, #0
 8000c98:	3401      	adds	r4, #1
 8000c9a:	9305      	str	r3, [sp, #20]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f04f 0c0a 	mov.w	ip, #10
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ca8:	3a30      	subs	r2, #48	@ 0x30
 8000caa:	2a09      	cmp	r2, #9
 8000cac:	d903      	bls.n	8000cb6 <_svfiprintf_r+0x1a6>
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0c6      	beq.n	8000c40 <_svfiprintf_r+0x130>
 8000cb2:	9105      	str	r1, [sp, #20]
 8000cb4:	e7c4      	b.n	8000c40 <_svfiprintf_r+0x130>
 8000cb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cba:	4604      	mov	r4, r0
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e7f0      	b.n	8000ca2 <_svfiprintf_r+0x192>
 8000cc0:	ab03      	add	r3, sp, #12
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	462a      	mov	r2, r5
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d04 <_svfiprintf_r+0x1f4>)
 8000cc8:	a904      	add	r1, sp, #16
 8000cca:	4638      	mov	r0, r7
 8000ccc:	f3af 8000 	nop.w
 8000cd0:	1c42      	adds	r2, r0, #1
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	d1d6      	bne.n	8000c84 <_svfiprintf_r+0x174>
 8000cd6:	89ab      	ldrh	r3, [r5, #12]
 8000cd8:	065b      	lsls	r3, r3, #25
 8000cda:	f53f af2d 	bmi.w	8000b38 <_svfiprintf_r+0x28>
 8000cde:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ce0:	e72c      	b.n	8000b3c <_svfiprintf_r+0x2c>
 8000ce2:	ab03      	add	r3, sp, #12
 8000ce4:	9300      	str	r3, [sp, #0]
 8000ce6:	462a      	mov	r2, r5
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <_svfiprintf_r+0x1f4>)
 8000cea:	a904      	add	r1, sp, #16
 8000cec:	4638      	mov	r0, r7
 8000cee:	f000 f879 	bl	8000de4 <_printf_i>
 8000cf2:	e7ed      	b.n	8000cd0 <_svfiprintf_r+0x1c0>
 8000cf4:	080012d8 	.word	0x080012d8
 8000cf8:	080012de 	.word	0x080012de
 8000cfc:	080012e2 	.word	0x080012e2
 8000d00:	00000000 	.word	0x00000000
 8000d04:	08000a59 	.word	0x08000a59

08000d08 <_printf_common>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	4616      	mov	r6, r2
 8000d0e:	4698      	mov	r8, r3
 8000d10:	688a      	ldr	r2, [r1, #8]
 8000d12:	690b      	ldr	r3, [r1, #16]
 8000d14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	bfb8      	it	lt
 8000d1c:	4613      	movlt	r3, r2
 8000d1e:	6033      	str	r3, [r6, #0]
 8000d20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000d24:	4607      	mov	r7, r0
 8000d26:	460c      	mov	r4, r1
 8000d28:	b10a      	cbz	r2, 8000d2e <_printf_common+0x26>
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	6033      	str	r3, [r6, #0]
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	0699      	lsls	r1, r3, #26
 8000d32:	bf42      	ittt	mi
 8000d34:	6833      	ldrmi	r3, [r6, #0]
 8000d36:	3302      	addmi	r3, #2
 8000d38:	6033      	strmi	r3, [r6, #0]
 8000d3a:	6825      	ldr	r5, [r4, #0]
 8000d3c:	f015 0506 	ands.w	r5, r5, #6
 8000d40:	d106      	bne.n	8000d50 <_printf_common+0x48>
 8000d42:	f104 0a19 	add.w	sl, r4, #25
 8000d46:	68e3      	ldr	r3, [r4, #12]
 8000d48:	6832      	ldr	r2, [r6, #0]
 8000d4a:	1a9b      	subs	r3, r3, r2
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	dc26      	bgt.n	8000d9e <_printf_common+0x96>
 8000d50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d54:	6822      	ldr	r2, [r4, #0]
 8000d56:	3b00      	subs	r3, #0
 8000d58:	bf18      	it	ne
 8000d5a:	2301      	movne	r3, #1
 8000d5c:	0692      	lsls	r2, r2, #26
 8000d5e:	d42b      	bmi.n	8000db8 <_printf_common+0xb0>
 8000d60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d64:	4641      	mov	r1, r8
 8000d66:	4638      	mov	r0, r7
 8000d68:	47c8      	blx	r9
 8000d6a:	3001      	adds	r0, #1
 8000d6c:	d01e      	beq.n	8000dac <_printf_common+0xa4>
 8000d6e:	6823      	ldr	r3, [r4, #0]
 8000d70:	6922      	ldr	r2, [r4, #16]
 8000d72:	f003 0306 	and.w	r3, r3, #6
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf02      	ittt	eq
 8000d7a:	68e5      	ldreq	r5, [r4, #12]
 8000d7c:	6833      	ldreq	r3, [r6, #0]
 8000d7e:	1aed      	subeq	r5, r5, r3
 8000d80:	68a3      	ldr	r3, [r4, #8]
 8000d82:	bf0c      	ite	eq
 8000d84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d88:	2500      	movne	r5, #0
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	bfc4      	itt	gt
 8000d8e:	1a9b      	subgt	r3, r3, r2
 8000d90:	18ed      	addgt	r5, r5, r3
 8000d92:	2600      	movs	r6, #0
 8000d94:	341a      	adds	r4, #26
 8000d96:	42b5      	cmp	r5, r6
 8000d98:	d11a      	bne.n	8000dd0 <_printf_common+0xc8>
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	e008      	b.n	8000db0 <_printf_common+0xa8>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	4652      	mov	r2, sl
 8000da2:	4641      	mov	r1, r8
 8000da4:	4638      	mov	r0, r7
 8000da6:	47c8      	blx	r9
 8000da8:	3001      	adds	r0, #1
 8000daa:	d103      	bne.n	8000db4 <_printf_common+0xac>
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	3501      	adds	r5, #1
 8000db6:	e7c6      	b.n	8000d46 <_printf_common+0x3e>
 8000db8:	18e1      	adds	r1, r4, r3
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	2030      	movs	r0, #48	@ 0x30
 8000dbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000dc2:	4422      	add	r2, r4
 8000dc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000dc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000dcc:	3302      	adds	r3, #2
 8000dce:	e7c7      	b.n	8000d60 <_printf_common+0x58>
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	4622      	mov	r2, r4
 8000dd4:	4641      	mov	r1, r8
 8000dd6:	4638      	mov	r0, r7
 8000dd8:	47c8      	blx	r9
 8000dda:	3001      	adds	r0, #1
 8000ddc:	d0e6      	beq.n	8000dac <_printf_common+0xa4>
 8000dde:	3601      	adds	r6, #1
 8000de0:	e7d9      	b.n	8000d96 <_printf_common+0x8e>
	...

08000de4 <_printf_i>:
 8000de4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	7e0f      	ldrb	r7, [r1, #24]
 8000dea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000dec:	2f78      	cmp	r7, #120	@ 0x78
 8000dee:	4691      	mov	r9, r2
 8000df0:	4680      	mov	r8, r0
 8000df2:	460c      	mov	r4, r1
 8000df4:	469a      	mov	sl, r3
 8000df6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000dfa:	d807      	bhi.n	8000e0c <_printf_i+0x28>
 8000dfc:	2f62      	cmp	r7, #98	@ 0x62
 8000dfe:	d80a      	bhi.n	8000e16 <_printf_i+0x32>
 8000e00:	2f00      	cmp	r7, #0
 8000e02:	f000 80d1 	beq.w	8000fa8 <_printf_i+0x1c4>
 8000e06:	2f58      	cmp	r7, #88	@ 0x58
 8000e08:	f000 80b8 	beq.w	8000f7c <_printf_i+0x198>
 8000e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000e14:	e03a      	b.n	8000e8c <_printf_i+0xa8>
 8000e16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000e1a:	2b15      	cmp	r3, #21
 8000e1c:	d8f6      	bhi.n	8000e0c <_printf_i+0x28>
 8000e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8000e24 <_printf_i+0x40>)
 8000e20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e24:	08000e7d 	.word	0x08000e7d
 8000e28:	08000e91 	.word	0x08000e91
 8000e2c:	08000e0d 	.word	0x08000e0d
 8000e30:	08000e0d 	.word	0x08000e0d
 8000e34:	08000e0d 	.word	0x08000e0d
 8000e38:	08000e0d 	.word	0x08000e0d
 8000e3c:	08000e91 	.word	0x08000e91
 8000e40:	08000e0d 	.word	0x08000e0d
 8000e44:	08000e0d 	.word	0x08000e0d
 8000e48:	08000e0d 	.word	0x08000e0d
 8000e4c:	08000e0d 	.word	0x08000e0d
 8000e50:	08000f8f 	.word	0x08000f8f
 8000e54:	08000ebb 	.word	0x08000ebb
 8000e58:	08000f49 	.word	0x08000f49
 8000e5c:	08000e0d 	.word	0x08000e0d
 8000e60:	08000e0d 	.word	0x08000e0d
 8000e64:	08000fb1 	.word	0x08000fb1
 8000e68:	08000e0d 	.word	0x08000e0d
 8000e6c:	08000ebb 	.word	0x08000ebb
 8000e70:	08000e0d 	.word	0x08000e0d
 8000e74:	08000e0d 	.word	0x08000e0d
 8000e78:	08000f51 	.word	0x08000f51
 8000e7c:	6833      	ldr	r3, [r6, #0]
 8000e7e:	1d1a      	adds	r2, r3, #4
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	6032      	str	r2, [r6, #0]
 8000e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e09c      	b.n	8000fca <_printf_i+0x1e6>
 8000e90:	6833      	ldr	r3, [r6, #0]
 8000e92:	6820      	ldr	r0, [r4, #0]
 8000e94:	1d19      	adds	r1, r3, #4
 8000e96:	6031      	str	r1, [r6, #0]
 8000e98:	0606      	lsls	r6, r0, #24
 8000e9a:	d501      	bpl.n	8000ea0 <_printf_i+0xbc>
 8000e9c:	681d      	ldr	r5, [r3, #0]
 8000e9e:	e003      	b.n	8000ea8 <_printf_i+0xc4>
 8000ea0:	0645      	lsls	r5, r0, #25
 8000ea2:	d5fb      	bpl.n	8000e9c <_printf_i+0xb8>
 8000ea4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ea8:	2d00      	cmp	r5, #0
 8000eaa:	da03      	bge.n	8000eb4 <_printf_i+0xd0>
 8000eac:	232d      	movs	r3, #45	@ 0x2d
 8000eae:	426d      	negs	r5, r5
 8000eb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000eb4:	4858      	ldr	r0, [pc, #352]	@ (8001018 <_printf_i+0x234>)
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	e011      	b.n	8000ede <_printf_i+0xfa>
 8000eba:	6821      	ldr	r1, [r4, #0]
 8000ebc:	6833      	ldr	r3, [r6, #0]
 8000ebe:	0608      	lsls	r0, r1, #24
 8000ec0:	f853 5b04 	ldr.w	r5, [r3], #4
 8000ec4:	d402      	bmi.n	8000ecc <_printf_i+0xe8>
 8000ec6:	0649      	lsls	r1, r1, #25
 8000ec8:	bf48      	it	mi
 8000eca:	b2ad      	uxthmi	r5, r5
 8000ecc:	2f6f      	cmp	r7, #111	@ 0x6f
 8000ece:	4852      	ldr	r0, [pc, #328]	@ (8001018 <_printf_i+0x234>)
 8000ed0:	6033      	str	r3, [r6, #0]
 8000ed2:	bf14      	ite	ne
 8000ed4:	230a      	movne	r3, #10
 8000ed6:	2308      	moveq	r3, #8
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000ede:	6866      	ldr	r6, [r4, #4]
 8000ee0:	60a6      	str	r6, [r4, #8]
 8000ee2:	2e00      	cmp	r6, #0
 8000ee4:	db05      	blt.n	8000ef2 <_printf_i+0x10e>
 8000ee6:	6821      	ldr	r1, [r4, #0]
 8000ee8:	432e      	orrs	r6, r5
 8000eea:	f021 0104 	bic.w	r1, r1, #4
 8000eee:	6021      	str	r1, [r4, #0]
 8000ef0:	d04b      	beq.n	8000f8a <_printf_i+0x1a6>
 8000ef2:	4616      	mov	r6, r2
 8000ef4:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ef8:	fb03 5711 	mls	r7, r3, r1, r5
 8000efc:	5dc7      	ldrb	r7, [r0, r7]
 8000efe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000f02:	462f      	mov	r7, r5
 8000f04:	42bb      	cmp	r3, r7
 8000f06:	460d      	mov	r5, r1
 8000f08:	d9f4      	bls.n	8000ef4 <_printf_i+0x110>
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d10b      	bne.n	8000f26 <_printf_i+0x142>
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	07df      	lsls	r7, r3, #31
 8000f12:	d508      	bpl.n	8000f26 <_printf_i+0x142>
 8000f14:	6923      	ldr	r3, [r4, #16]
 8000f16:	6861      	ldr	r1, [r4, #4]
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	bfde      	ittt	le
 8000f1c:	2330      	movle	r3, #48	@ 0x30
 8000f1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f22:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000f26:	1b92      	subs	r2, r2, r6
 8000f28:	6122      	str	r2, [r4, #16]
 8000f2a:	f8cd a000 	str.w	sl, [sp]
 8000f2e:	464b      	mov	r3, r9
 8000f30:	aa03      	add	r2, sp, #12
 8000f32:	4621      	mov	r1, r4
 8000f34:	4640      	mov	r0, r8
 8000f36:	f7ff fee7 	bl	8000d08 <_printf_common>
 8000f3a:	3001      	adds	r0, #1
 8000f3c:	d14a      	bne.n	8000fd4 <_printf_i+0x1f0>
 8000f3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f42:	b004      	add	sp, #16
 8000f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	f043 0320 	orr.w	r3, r3, #32
 8000f4e:	6023      	str	r3, [r4, #0]
 8000f50:	4832      	ldr	r0, [pc, #200]	@ (800101c <_printf_i+0x238>)
 8000f52:	2778      	movs	r7, #120	@ 0x78
 8000f54:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	6831      	ldr	r1, [r6, #0]
 8000f5c:	061f      	lsls	r7, r3, #24
 8000f5e:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f62:	d402      	bmi.n	8000f6a <_printf_i+0x186>
 8000f64:	065f      	lsls	r7, r3, #25
 8000f66:	bf48      	it	mi
 8000f68:	b2ad      	uxthmi	r5, r5
 8000f6a:	6031      	str	r1, [r6, #0]
 8000f6c:	07d9      	lsls	r1, r3, #31
 8000f6e:	bf44      	itt	mi
 8000f70:	f043 0320 	orrmi.w	r3, r3, #32
 8000f74:	6023      	strmi	r3, [r4, #0]
 8000f76:	b11d      	cbz	r5, 8000f80 <_printf_i+0x19c>
 8000f78:	2310      	movs	r3, #16
 8000f7a:	e7ad      	b.n	8000ed8 <_printf_i+0xf4>
 8000f7c:	4826      	ldr	r0, [pc, #152]	@ (8001018 <_printf_i+0x234>)
 8000f7e:	e7e9      	b.n	8000f54 <_printf_i+0x170>
 8000f80:	6823      	ldr	r3, [r4, #0]
 8000f82:	f023 0320 	bic.w	r3, r3, #32
 8000f86:	6023      	str	r3, [r4, #0]
 8000f88:	e7f6      	b.n	8000f78 <_printf_i+0x194>
 8000f8a:	4616      	mov	r6, r2
 8000f8c:	e7bd      	b.n	8000f0a <_printf_i+0x126>
 8000f8e:	6833      	ldr	r3, [r6, #0]
 8000f90:	6825      	ldr	r5, [r4, #0]
 8000f92:	6961      	ldr	r1, [r4, #20]
 8000f94:	1d18      	adds	r0, r3, #4
 8000f96:	6030      	str	r0, [r6, #0]
 8000f98:	062e      	lsls	r6, r5, #24
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	d501      	bpl.n	8000fa2 <_printf_i+0x1be>
 8000f9e:	6019      	str	r1, [r3, #0]
 8000fa0:	e002      	b.n	8000fa8 <_printf_i+0x1c4>
 8000fa2:	0668      	lsls	r0, r5, #25
 8000fa4:	d5fb      	bpl.n	8000f9e <_printf_i+0x1ba>
 8000fa6:	8019      	strh	r1, [r3, #0]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	6123      	str	r3, [r4, #16]
 8000fac:	4616      	mov	r6, r2
 8000fae:	e7bc      	b.n	8000f2a <_printf_i+0x146>
 8000fb0:	6833      	ldr	r3, [r6, #0]
 8000fb2:	1d1a      	adds	r2, r3, #4
 8000fb4:	6032      	str	r2, [r6, #0]
 8000fb6:	681e      	ldr	r6, [r3, #0]
 8000fb8:	6862      	ldr	r2, [r4, #4]
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	f7ff f907 	bl	80001d0 <memchr>
 8000fc2:	b108      	cbz	r0, 8000fc8 <_printf_i+0x1e4>
 8000fc4:	1b80      	subs	r0, r0, r6
 8000fc6:	6060      	str	r0, [r4, #4]
 8000fc8:	6863      	ldr	r3, [r4, #4]
 8000fca:	6123      	str	r3, [r4, #16]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000fd2:	e7aa      	b.n	8000f2a <_printf_i+0x146>
 8000fd4:	6923      	ldr	r3, [r4, #16]
 8000fd6:	4632      	mov	r2, r6
 8000fd8:	4649      	mov	r1, r9
 8000fda:	4640      	mov	r0, r8
 8000fdc:	47d0      	blx	sl
 8000fde:	3001      	adds	r0, #1
 8000fe0:	d0ad      	beq.n	8000f3e <_printf_i+0x15a>
 8000fe2:	6823      	ldr	r3, [r4, #0]
 8000fe4:	079b      	lsls	r3, r3, #30
 8000fe6:	d413      	bmi.n	8001010 <_printf_i+0x22c>
 8000fe8:	68e0      	ldr	r0, [r4, #12]
 8000fea:	9b03      	ldr	r3, [sp, #12]
 8000fec:	4298      	cmp	r0, r3
 8000fee:	bfb8      	it	lt
 8000ff0:	4618      	movlt	r0, r3
 8000ff2:	e7a6      	b.n	8000f42 <_printf_i+0x15e>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	4632      	mov	r2, r6
 8000ff8:	4649      	mov	r1, r9
 8000ffa:	4640      	mov	r0, r8
 8000ffc:	47d0      	blx	sl
 8000ffe:	3001      	adds	r0, #1
 8001000:	d09d      	beq.n	8000f3e <_printf_i+0x15a>
 8001002:	3501      	adds	r5, #1
 8001004:	68e3      	ldr	r3, [r4, #12]
 8001006:	9903      	ldr	r1, [sp, #12]
 8001008:	1a5b      	subs	r3, r3, r1
 800100a:	42ab      	cmp	r3, r5
 800100c:	dcf2      	bgt.n	8000ff4 <_printf_i+0x210>
 800100e:	e7eb      	b.n	8000fe8 <_printf_i+0x204>
 8001010:	2500      	movs	r5, #0
 8001012:	f104 0619 	add.w	r6, r4, #25
 8001016:	e7f5      	b.n	8001004 <_printf_i+0x220>
 8001018:	080012e9 	.word	0x080012e9
 800101c:	080012fa 	.word	0x080012fa

08001020 <memmove>:
 8001020:	4288      	cmp	r0, r1
 8001022:	b510      	push	{r4, lr}
 8001024:	eb01 0402 	add.w	r4, r1, r2
 8001028:	d902      	bls.n	8001030 <memmove+0x10>
 800102a:	4284      	cmp	r4, r0
 800102c:	4623      	mov	r3, r4
 800102e:	d807      	bhi.n	8001040 <memmove+0x20>
 8001030:	1e43      	subs	r3, r0, #1
 8001032:	42a1      	cmp	r1, r4
 8001034:	d008      	beq.n	8001048 <memmove+0x28>
 8001036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800103a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800103e:	e7f8      	b.n	8001032 <memmove+0x12>
 8001040:	4402      	add	r2, r0
 8001042:	4601      	mov	r1, r0
 8001044:	428a      	cmp	r2, r1
 8001046:	d100      	bne.n	800104a <memmove+0x2a>
 8001048:	bd10      	pop	{r4, pc}
 800104a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800104e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001052:	e7f7      	b.n	8001044 <memmove+0x24>

08001054 <_sbrk_r>:
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	4d06      	ldr	r5, [pc, #24]	@ (8001070 <_sbrk_r+0x1c>)
 8001058:	2300      	movs	r3, #0
 800105a:	4604      	mov	r4, r0
 800105c:	4608      	mov	r0, r1
 800105e:	602b      	str	r3, [r5, #0]
 8001060:	f7ff fb1e 	bl	80006a0 <_sbrk>
 8001064:	1c43      	adds	r3, r0, #1
 8001066:	d102      	bne.n	800106e <_sbrk_r+0x1a>
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	b103      	cbz	r3, 800106e <_sbrk_r+0x1a>
 800106c:	6023      	str	r3, [r4, #0]
 800106e:	bd38      	pop	{r3, r4, r5, pc}
 8001070:	200001f0 	.word	0x200001f0

08001074 <memcpy>:
 8001074:	440a      	add	r2, r1
 8001076:	4291      	cmp	r1, r2
 8001078:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800107c:	d100      	bne.n	8001080 <memcpy+0xc>
 800107e:	4770      	bx	lr
 8001080:	b510      	push	{r4, lr}
 8001082:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001086:	f803 4f01 	strb.w	r4, [r3, #1]!
 800108a:	4291      	cmp	r1, r2
 800108c:	d1f9      	bne.n	8001082 <memcpy+0xe>
 800108e:	bd10      	pop	{r4, pc}

08001090 <_realloc_r>:
 8001090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001094:	4607      	mov	r7, r0
 8001096:	4614      	mov	r4, r2
 8001098:	460d      	mov	r5, r1
 800109a:	b921      	cbnz	r1, 80010a6 <_realloc_r+0x16>
 800109c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010a0:	4611      	mov	r1, r2
 80010a2:	f7ff bc4d 	b.w	8000940 <_malloc_r>
 80010a6:	b92a      	cbnz	r2, 80010b4 <_realloc_r+0x24>
 80010a8:	f7ff fbde 	bl	8000868 <_free_r>
 80010ac:	4625      	mov	r5, r4
 80010ae:	4628      	mov	r0, r5
 80010b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010b4:	f000 f81a 	bl	80010ec <_malloc_usable_size_r>
 80010b8:	4284      	cmp	r4, r0
 80010ba:	4606      	mov	r6, r0
 80010bc:	d802      	bhi.n	80010c4 <_realloc_r+0x34>
 80010be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80010c2:	d8f4      	bhi.n	80010ae <_realloc_r+0x1e>
 80010c4:	4621      	mov	r1, r4
 80010c6:	4638      	mov	r0, r7
 80010c8:	f7ff fc3a 	bl	8000940 <_malloc_r>
 80010cc:	4680      	mov	r8, r0
 80010ce:	b908      	cbnz	r0, 80010d4 <_realloc_r+0x44>
 80010d0:	4645      	mov	r5, r8
 80010d2:	e7ec      	b.n	80010ae <_realloc_r+0x1e>
 80010d4:	42b4      	cmp	r4, r6
 80010d6:	4622      	mov	r2, r4
 80010d8:	4629      	mov	r1, r5
 80010da:	bf28      	it	cs
 80010dc:	4632      	movcs	r2, r6
 80010de:	f7ff ffc9 	bl	8001074 <memcpy>
 80010e2:	4629      	mov	r1, r5
 80010e4:	4638      	mov	r0, r7
 80010e6:	f7ff fbbf 	bl	8000868 <_free_r>
 80010ea:	e7f1      	b.n	80010d0 <_realloc_r+0x40>

080010ec <_malloc_usable_size_r>:
 80010ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010f0:	1f18      	subs	r0, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	bfbc      	itt	lt
 80010f6:	580b      	ldrlt	r3, [r1, r0]
 80010f8:	18c0      	addlt	r0, r0, r3
 80010fa:	4770      	bx	lr

080010fc <_init>:
 80010fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fe:	bf00      	nop
 8001100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001102:	bc08      	pop	{r3}
 8001104:	469e      	mov	lr, r3
 8001106:	4770      	bx	lr

08001108 <_fini>:
 8001108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800110a:	bf00      	nop
 800110c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800110e:	bc08      	pop	{r3}
 8001110:	469e      	mov	lr, r3
 8001112:	4770      	bx	lr
